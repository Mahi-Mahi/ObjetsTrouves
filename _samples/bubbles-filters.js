// Generated by CoffeeScript 1.8.0
(function() {
  var BubbleChart, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BubbleChart = (function() {
    function BubbleChart(data) {
      this.do_filter = __bind(this.do_filter, this);
      this.use_filters = __bind(this.use_filters, this);
      this.hide_details = __bind(this.hide_details, this);
      this.show_details = __bind(this.show_details, this);
      this.hide_labels = __bind(this.hide_labels, this);
      this.display_labels = __bind(this.display_labels, this);
      this.move_towards_group = __bind(this.move_towards_group, this);
      this.display_by_group = __bind(this.display_by_group, this);
      this.move_towards_group_center = __bind(this.move_towards_group_center, this);
      this.group_by = __bind(this.group_by, this);
      this.get_distinct_values = __bind(this.get_distinct_values, this);
      this.color_by = __bind(this.color_by, this);
      this.remove_colors = __bind(this.remove_colors, this);
      this.sort = __bind(this.sort, this);
      this.get_color_map = __bind(this.get_color_map, this);
      this.get_type_from_key_name = __bind(this.get_type_from_key_name, this);
      this.get_color_map_lookup_set = __bind(this.get_color_map_lookup_set, this);
      this.get_color_map_grade = __bind(this.get_color_map_grade, this);
      this.get_color_map_achievement = __bind(this.get_color_map_achievement, this);
      this.move_towards_center = __bind(this.move_towards_center, this);
      this.display_group_all = __bind(this.display_group_all, this);
      this.start = __bind(this.start, this);
      this.create_vis = __bind(this.create_vis, this);
      this.create_nodes = __bind(this.create_nodes, this);
      this.data = data;
      this.width = 1000;
      this.height = 600;
      this.default_radius = 15;
      this.tooltip = CustomTooltip("my_tooltip", 240);
      this.center = {
        x: this.width / 2,
        y: this.height / 2
      };
      this.layout_gravity = -0.01;
      this.damper = 0.5;
      this.vis = null;
      this.force = null;
      this.circles = null;
      this.nodes = [];
      this.create_nodes();
      this.create_vis();
    }

    BubbleChart.prototype.create_nodes = function() {
      return this.data.forEach((function(_this) {
        return function(d, i) {
          var node;
          node = {
            id: i,
            original: d,
            radius: _this.default_radius,
            value: 99,
            x: Math.random() * _this.width,
            y: Math.random() * _this.height
          };
          return _this.nodes.push(node);
        };
      })(this));
    };

    BubbleChart.prototype.create_vis = function() {
      var that;
      this.vis = d3.select("#vis").append("svg").attr("width", this.width).attr("height", this.height).attr("id", "svg_vis");
      this.circles = this.vis.selectAll("circle").data(this.nodes, function(d) {
        return d.id;
      });
      that = this;
      this.circles.enter().append("circle").attr("r", 100).style("fill", (function(_this) {
        return function(d) {
          return '#cfcfcf';
        };
      })(this)).attr("stroke-width", 2).attr("stroke", (function(_this) {
        return function(d) {
          return '#404040';
        };
      })(this)).attr("id", function(d) {
        return "bubble_" + d.id;
      }).attr("opacity", 0).on("mouseover", function(d, i) {
        return that.show_details(d, i, this);
      }).on("mouseout", function(d, i) {
        return that.hide_details(d, i, this);
      });
      return this.circles.transition().duration(2000).attr("opacity", 1).attr("r", function(d) {
        return d.radius;
      });
    };

    BubbleChart.prototype.charge = function(d) {
      if (d.radius === 0) {
        return 0;
      }
      return -Math.pow(d.radius, 2);
    };

    BubbleChart.prototype.start = function() {
      this.force = d3.layout.force().nodes(this.nodes).size([this.width, this.height]);
      return this.circles.call(this.force.drag);
    };

    BubbleChart.prototype.display_group_all = function() {
      this.hide_labels();
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_center(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      return this.force.start();
    };

    BubbleChart.prototype.move_towards_center = function(alpha) {
      return (function(_this) {
        return function(d) {
          d.x = d.x + (_this.center.x - d.x) * (_this.damper + 0.02) * alpha;
          return d.y = d.y + (_this.center.y - d.y) * (_this.damper + 0.02) * alpha;
        };
      })(this);
    };

    BubbleChart.prototype.get_color_map_achievement = function(allValuesArray) {
      var color_map, value, _i, _len;
      color_map = {};
      for (_i = 0, _len = allValuesArray.length; _i < _len; _i++) {
        value = allValuesArray[_i];
        if (value <= -2) {
          color_map[value] = '#ff0000';
        } else if (value <= -1) {
          color_map[value] = '#ff9900';
        } else if (value <= 0) {
          color_map[value] = '#ffff00';
        } else if (value < 2) {
          color_map[value] = '#00FF00';
        } else {
          color_map[value] = '#FF00CC';
        }
      }
      return color_map;
    };

    BubbleChart.prototype.get_color_map_grade = function(allValuesArray) {
      var color_map, value, _i, _len;
      color_map = {};
      for (_i = 0, _len = allValuesArray.length; _i < _len; _i++) {
        value = allValuesArray[_i];
        switch (value) {
          case "*":
            color_map[value] = '#FF00CC';
            break;
          case "Z":
            color_map[value] = '#FF00CC';
            break;
          case "A":
            color_map[value] = '#00FF00';
            break;
          case "B":
            color_map[value] = '#00FF00';
            break;
          case "C":
            color_map[value] = '#FFFF00';
            break;
          case "D":
            color_map[value] = '#FF0000';
            break;
          case "E":
            color_map[value] = '#FF0000';
            break;
          case "F":
            color_map[value] = '#FF0000';
            break;
          case "G":
            color_map[value] = '#FF0000';
            break;
          case "U":
            color_map[value] = '#7F0000';
            break;
          default:
            color_map[value] = '#4F4F4F';
        }
      }
      return color_map;
    };

    BubbleChart.prototype.get_color_map_lookup_set = function(allValuesArray) {
      var baseArray, color_map, index, value, _i, _len;
      baseArray = ["#0000D9", "#FF00FF", "#FF0033", "#FFCC66", "#66CC33", "#33FFCC", "#00A0AA", "#FFCCFF", "#FF9933", "#99FF99", "#00BB00", "#CCFFCC", "#333333", "#CCCCCC", "#99CCCC", "#FF0000"];
      index = 0;
      color_map = {};
      for (_i = 0, _len = allValuesArray.length; _i < _len; _i++) {
        value = allValuesArray[_i];
        color_map[value] = baseArray[index];
        index = index + 1;
        if (index >= baseArray.length) {
          index = 0;
        }
      }
      return color_map;
    };

    BubbleChart.prototype.get_type_from_key_name = function(keyName) {
      if (/^Achievement/.test(keyName)) {
        return "Achievement";
      }
      if (/^Grade/.test(keyName)) {
        return "Grade";
      }
      return "Other";
    };

    BubbleChart.prototype.get_color_map = function(keyName, allValuesArray) {
      var key_type;
      key_type = this.get_type_from_key_name(keyName);
      switch (key_type) {
        case "Achievement":
          return this.get_color_map_achievement(allValuesArray);
        case "Grade":
          return this.get_color_map_grade(allValuesArray);
        default:
          return this.get_color_map_lookup_set(allValuesArray);
      }
    };

    BubbleChart.prototype.sort = function(keyName, allValuesArray) {
      var key_type;
      key_type = this.get_type_from_key_name(keyName);
      switch (key_type) {
        case "Achievement":
          return allValuesArray.sort((function(_this) {
            return function(a, b) {
              return Number(a) - Number(b);
            };
          })(this));
        default:
          return allValuesArray.sort();
      }
    };

    BubbleChart.prototype.remove_colors = function() {
      this.circles.transition().duration(2000).style("fill", "#cfcfcf");
      return hide_color_chart();
    };

    BubbleChart.prototype.color_by = function(what_to_color_by) {
      var allValuesArray, color_mapper;
      this.what_to_color_by = what_to_color_by;
      allValuesArray = this.get_distinct_values(what_to_color_by);
      color_mapper = this.get_color_map(what_to_color_by, allValuesArray);
      show_color_chart(what_to_color_by, color_mapper);
      return this.circles.transition().duration(1000).style("fill", (function(_this) {
        return function(d) {
          return color_mapper[d.original[what_to_color_by]];
        };
      })(this));
    };

    BubbleChart.prototype.get_distinct_values = function(what) {
      var allValues, allValuesArray, key, value;
      allValues = {};
      this.nodes.forEach((function(_this) {
        return function(d) {
          var value;
          value = d.original[what];
          return allValues[value] = true;
        };
      })(this));
      allValuesArray = [];
      for (key in allValues) {
        value = allValues[key];
        allValuesArray.push(key);
      }
      this.sort(what, allValuesArray);
      return allValuesArray;
    };

    BubbleChart.prototype.group_by = function(what_to_group_by) {
      var allValuesArray, numCenters, position, total_slots;
      this.what_to_group_by = what_to_group_by;
      allValuesArray = this.get_distinct_values(what_to_group_by);
      numCenters = allValuesArray.length;
      this.group_centers = {};
      this.group_labels = {};
      position = 2;
      total_slots = allValuesArray.length + 4;
      allValuesArray.forEach((function(_this) {
        return function(i) {
          var x_position;
          x_position = _this.width * position / total_slots;
          _this.group_centers[i] = {
            x: x_position,
            y: _this.height / 2
          };
          _this.group_labels[i] = x_position;
          return position = position + 1;
        };
      })(this));
      this.hide_labels();
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_group_center(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();
      return this.display_labels();
    };

    BubbleChart.prototype.move_towards_group_center = function(alpha) {
      return (function(_this) {
        return function(d) {
          var target, value;
          value = d.original[_this.what_to_group_by];
          target = _this.group_centers[value];
          d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
          return d.y = d.y + (target.y - d.y) * (_this.damper + 0.02) * alpha * 1.1;
        };
      })(this);
    };

    BubbleChart.prototype.display_by_group = function() {
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_group(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();
      return this.display_years();
    };

    BubbleChart.prototype.move_towards_group = function(alpha) {
      return (function(_this) {
        return function(d) {
          var target;
          target = _this.group_centers[d.group];
          d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
          return d.y = d.y + (target.y - d.y) * (_this.damper + 0.02) * alpha * 1.1;
        };
      })(this);
    };

    BubbleChart.prototype.display_labels = function() {
      var label_data, labels;
      label_data = d3.keys(this.group_labels);
      labels = this.vis.selectAll(".top_labels").data(label_data);
      return labels.enter().append("text").attr("class", "top_labels").attr("x", (function(_this) {
        return function(d) {
          return _this.group_labels[d];
        };
      })(this)).attr("y", 40).attr("text-anchor", "start").text(function(d) {
        return d;
      });
    };

    BubbleChart.prototype.hide_labels = function() {
      var labels;
      return labels = this.vis.selectAll(".top_labels").remove();
    };

    BubbleChart.prototype.show_details = function(data, i, element) {
      var content, key, title, value, _ref;
      d3.select(element).attr("stroke", "black");
      content = "";
      _ref = data.original;
      for (key in _ref) {
        value = _ref[key];
        title = key.substring(key.indexOf(":") + 1);
        content += "<span class=\"name\">" + title + ":</span><span class=\"value\"> " + value + "</span><br/>";
      }
      return this.tooltip.showTooltip(content, d3.event);
    };

    BubbleChart.prototype.hide_details = function(data, i, element) {
      d3.select(element).attr("stroke", "#404040");
      return this.tooltip.hideTooltip();
    };

    BubbleChart.prototype.use_filters = function(filters) {
      return this.nodes.forEach((function(_this) {
        return function(d) {
          d.radius = _this.default_radius;
          filters.discrete.forEach(function(filter) {
            var value;
            value = d.original[filter.target];
            if (filter.removeValues[value] != null) {
              return d.radius = 0;
            }
          });
          return _this.do_filter();
        };
      })(this));
    };

    BubbleChart.prototype.do_filter = function() {
      this.force.start();
      return this.circles.transition().duration(2000).attr("r", function(d) {
        return d.radius;
      });
    };

    return BubbleChart;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $(function() {
    var chart, render_chart, render_vis;
    chart = null;
    render_vis = function(csv) {
      render_filters_colors_and_groups(csv);
      return render_chart(csv);
    };
    render_chart = function(csv) {
      chart = new BubbleChart(csv);
      chart.start();
      return root.display_all();
    };
    root.display_all = (function(_this) {
      return function() {
        return chart.display_group_all();
      };
    })(this);
    root.group_by = (function(_this) {
      return function(groupBy) {
        if (groupBy === '') {
          return chart.display_group_all();
        } else {
          return chart.group_by(groupBy);
        }
      };
    })(this);
    root.color_by = (function(_this) {
      return function(colorBy) {
        if (colorBy === '') {
          return chart.remove_colors();
        } else {
          return chart.color_by(colorBy);
        }
      };
    })(this);
    root.use_filters = (function(_this) {
      return function(filters) {
        return chart.use_filters(filters);
      };
    })(this);
    return d3.csv("data/sciencedata.csv", render_vis);
  });

}).call(this);
